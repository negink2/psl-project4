tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
summary(tmp$ratings_per_movie)
tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie")) %>%
print(n = 31)
tmp %>% ggplot(aes(ratings_per_movie)) +
geom_bar(fill = "steelblue", width = 1) + coord_cartesian(c(1,1500))
small_image_url = "https://liangfgithub.github.io/MovieImages/"
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title', 'ave_ratings') %>%
arrange(desc(-ave_ratings)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
###############################################################
system1_1 = function(genres,movie = movies,rates = ratings){
movs_ids = list()
i = 1
for(g in movies$Genres){
if(grepl(genres, g, fixed = TRUE)){
movs_ids = movies %>% filter(movies$Genres == g)
}
}
sub_data = movies %>% filter(MovieID %in% movs_ids$MovieID)#movies$Genres == genres)
print('******')
print(head(sub_data))
print('******')
movie_ids = sub_data$MovieID
rating_id = rep(0,length(movie_ids))
for (i  in 1:length(movie_ids)) {
k = 0
for (j in 1:nrow(ratings)) {
if (ratings$MovieID[j] == movie_ids[i]){
rating_id[i] = rating_id[i] + ratings$Rating[j]
k = k + 1
}
}
rating_id[i] = rating_id[i]/k
}
res_id =movie_ids[order(rating_id,decreasing = TRUE)]
#if (length(res_id) > 5){
#res_id_brief = res_id[1:5]
#}
#else{
res_id_brief = res_id
#}
movie_recommend = rep(0,length(res_id_brief))
for (i in 1:length(res_id_brief)) {
movie_recommend[i] = movies %>%
filter(movies$MovieID == res_id_brief[i]) %>%
select(Title)
}
movie_recommend = unlist(movie_recommend)
return(movie_recommend)
}
#system1_1(genres = "Musical")
######################################################
system1_2 = function(genres,movie = movies,rates = ratings){
movs_ids = list()
i = 1
for(g in movies$Genres){
if(grepl(genres, g, fixed = TRUE)){
movs_ids = movies %>% filter(movies$Genres == g)
}
}
sub_data = movies %>% filter(MovieID %in% movs_ids$MovieID)#movies$Genres == genres)
print('******')
print(head(sub_data))
print('******')
#sub_data = movies %>% filter(genres %in% movies$Genres)# == genres)
movie_ids = sub_data$MovieID
rating_id = rep(0,length(movie_ids))
popularity = rep(0,length(movie_ids))
for (i  in 1:length(movie_ids)) {
k = 0
for (j in 1:nrow(ratings)) {
if (ratings$MovieID[j] == movie_ids[i]){
rating_id[i] = rating_id[i] + ratings$Rating[j]
k = k + 1
popularity[i] = popularity[i] +1
}
}
rating_id[i] = rating_id[i]/k
}
res_id =movie_ids[order(popularity,rating_id,decreasing = TRUE)]
if (length(res_id) > 5){
res_id_brief = res_id[1:5]
}
else{
res_id_brief = res_id
}
movie_recommend = rep(0,length(res_id_brief))
for (i in 1:length(res_id_brief)) {
movie_recommend[i] = movies %>%
filter(movies$MovieID == res_id_brief[i]) %>%
select(MovieID)
}
movie_recommend = unlist(movie_recommend)
return(movie_recommend)
}
all_genres = c('Animation','Adventure','Comedy','Action','Drama','Thriller','Crime',
'Children\'s','Documentary','Sci-Fi','Horror','Western','Mystery','Film-Noir','War','Fantasy','Musical')
for(genre in all_genres){
print(genre)
#rec_results = system1_1(genres = genre)
rec_results = system1_2(genres = genre)
setwd("/Users/negin/Documents/Illinois/Courses/CS598_Practical_Statistical_Learning/Projects/Project4/Project4_MovieRecommendation_App/movie_data/system1_data")
write.csv(rec_results,paste('system1_1_',genre,'.csv', sep=''))
#print(paste('system1_1_',genre,' csv file has been created'))
print(paste('system1_2_',genre,' csv file has been created'))
}
print('Done')
#system1_2(genres = "Musical")
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(DT)
library(data.table)
library(reshape2)
################################# read tarings
myurl = "https://liangfgithub.github.io/MovieData/"
# use colClasses = 'NULL' to skip columns
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
#### read movies
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
# convert accented characters
movies$Title[73]
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
movies$Title[73]
# extract year
movies$Year = as.numeric(unlist(
lapply(movies$Title, function(x) substr(x, nchar(x)-4, nchar(x)-1))))
######## read users
users = read.csv(paste0(myurl, 'users.dat?raw=true'),
sep = ':', header = FALSE)
users = users[, -c(2,4,6,8)] # skip columns
colnames(users) = c('UserID', 'Gender', 'Age', 'Occupation', 'Zip-code')
dim(users)
length(unique(ratings$UserID))
########################################################################
length(unique(ratings$MovieID))
movies_not_rated = movies %>%
filter(!(MovieID %in% ratings$MovieID))
dim(movies_not_rated)
tmp = data.frame(Rating = 1:5,
freq = as.vector(table(ratings$Rating)/nrow(ratings)))
ggplot(data = tmp, aes(x = Rating, y = freq)) +
geom_bar(stat="identity", fill = 'steelblue', width = 0.6) +
geom_text(aes(label=round(freq, dig=2)),
vjust=1.6, color="white", size=3.5) +
theme_minimal()
tmp = ratings %>%
group_by(UserID) %>%
summarize(ratings_per_user = n())
summary(tmp$ratings_per_user)
stem(tmp$ratings_per_user)
sum(tmp$ratings_per_user > 500)
sort(tmp$ratings_per_user[tmp$ratings_per_user>1300])
tmp %>%
ggplot(aes(ratings_per_user)) +
geom_bar(fill = "steelblue") + coord_cartesian(c(20, 500))
tmp = tmp %>% full_join(users, by = 'UserID')
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
summary(tmp$ratings_per_movie)
tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie")) %>%
print(n = 31)
tmp %>% ggplot(aes(ratings_per_movie)) +
geom_bar(fill = "steelblue", width = 1) + coord_cartesian(c(1,1500))
small_image_url = "https://liangfgithub.github.io/MovieImages/"
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title', 'ave_ratings') %>%
arrange(desc(-ave_ratings)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
###############################################################
system1_1 = function(genres,movie = movies,rates = ratings){
movs_ids = list()
i = 1
for(g in movies$Genres){
if(grepl(genres, g, fixed = TRUE)){
movs_ids = movies %>% filter(movies$Genres == g)
}
}
sub_data = movies %>% filter(MovieID %in% movs_ids$MovieID)#movies$Genres == genres)
print('******')
print(head(sub_data))
print('******')
movie_ids = sub_data$MovieID
rating_id = rep(0,length(movie_ids))
for (i  in 1:length(movie_ids)) {
k = 0
for (j in 1:nrow(ratings)) {
if (ratings$MovieID[j] == movie_ids[i]){
rating_id[i] = rating_id[i] + ratings$Rating[j]
k = k + 1
}
}
rating_id[i] = rating_id[i]/k
}
res_id =movie_ids[order(rating_id,decreasing = TRUE)]
#if (length(res_id) > 5){
#res_id_brief = res_id[1:5]
#}
#else{
res_id_brief = res_id
#}
movie_recommend = rep(0,length(res_id_brief))
for (i in 1:length(res_id_brief)) {
movie_recommend[i] = movies %>%
filter(movies$MovieID == res_id_brief[i]) %>%
select(Title)
}
movie_recommend = unlist(movie_recommend)
return(movie_recommend)
}
#system1_1(genres = "Musical")
######################################################
system1_2 = function(genres,movie = movies,rates = ratings){
movs_ids = list()
i = 1
for(g in movies$Genres){
if(grepl(genres, g, fixed = TRUE)){
movs_ids = movies %>% filter(movies$Genres == g)
}
}
sub_data = movies %>% filter(MovieID %in% movs_ids$MovieID)#movies$Genres == genres)
print('******')
print(head(sub_data))
print('******')
#sub_data = movies %>% filter(genres %in% movies$Genres)# == genres)
movie_ids = sub_data$MovieID
rating_id = rep(0,length(movie_ids))
popularity = rep(0,length(movie_ids))
for (i  in 1:length(movie_ids)) {
k = 0
for (j in 1:nrow(ratings)) {
if (ratings$MovieID[j] == movie_ids[i]){
rating_id[i] = rating_id[i] + ratings$Rating[j]
k = k + 1
popularity[i] = popularity[i] +1
}
}
rating_id[i] = rating_id[i]/k
}
res_id =movie_ids[order(popularity,rating_id,decreasing = TRUE)]
if (length(res_id) > 5){
res_id_brief = res_id[1:5]
}
else{
res_id_brief = res_id
}
movie_recommend = rep(0,length(res_id_brief))
for (i in 1:length(res_id_brief)) {
movie_recommend[i] = movies %>%
filter(movies$MovieID == res_id_brief[i]) %>%
select(MovieID)
}
movie_recommend = unlist(movie_recommend)
return(movie_recommend)
}
all_genres = c('Animation','Adventure','Comedy','Action','Drama','Thriller','Crime',
'Children\'s','Documentary','Sci-Fi','Horror','Western','Mystery','Film-Noir','War','Fantasy','Musical')
for(genre in all_genres){
print(genre)
rec_results = system1_1(genres = genre)
#rec_results = system1_2(genres = genre)
setwd("/Users/negin/Documents/Illinois/Courses/CS598_Practical_Statistical_Learning/Projects/Project4/Project4_MovieRecommendation_App/movie_data/system1_data")
write.csv(rec_results,paste('system1_1_',genre,'.csv', sep=''))
#write.csv(rec_results,paste('system1_2_',genre,'.csv', sep=''))
print(paste('system1_1_',genre,' csv file has been created'))
#print(paste('system1_2_',genre,' csv file has been created'))
}
print('Done')
#system1_2(genres = "Musical")
library(dplyr)
library(ggplot2)
library(recommenderlab)
library(DT)
library(data.table)
library(reshape2)
################################# read tarings
myurl = "https://liangfgithub.github.io/MovieData/"
# use colClasses = 'NULL' to skip columns
ratings = read.csv(paste0(myurl, 'ratings.dat?raw=true'),
sep = ':',
colClasses = c('integer', 'NULL'),
header = FALSE)
colnames(ratings) = c('UserID', 'MovieID', 'Rating', 'Timestamp')
#### read movies
movies = readLines(paste0(myurl, 'movies.dat?raw=true'))
movies = strsplit(movies, split = "::", fixed = TRUE, useBytes = TRUE)
movies = matrix(unlist(movies), ncol = 3, byrow = TRUE)
movies = data.frame(movies, stringsAsFactors = FALSE)
colnames(movies) = c('MovieID', 'Title', 'Genres')
movies$MovieID = as.integer(movies$MovieID)
# convert accented characters
movies$Title[73]
movies$Title = iconv(movies$Title, "latin1", "UTF-8")
movies$Title[73]
# extract year
movies$Year = as.numeric(unlist(
lapply(movies$Title, function(x) substr(x, nchar(x)-4, nchar(x)-1))))
######## read users
users = read.csv(paste0(myurl, 'users.dat?raw=true'),
sep = ':', header = FALSE)
users = users[, -c(2,4,6,8)] # skip columns
colnames(users) = c('UserID', 'Gender', 'Age', 'Occupation', 'Zip-code')
dim(users)
length(unique(ratings$UserID))
########################################################################
length(unique(ratings$MovieID))
movies_not_rated = movies %>%
filter(!(MovieID %in% ratings$MovieID))
dim(movies_not_rated)
tmp = data.frame(Rating = 1:5,
freq = as.vector(table(ratings$Rating)/nrow(ratings)))
ggplot(data = tmp, aes(x = Rating, y = freq)) +
geom_bar(stat="identity", fill = 'steelblue', width = 0.6) +
geom_text(aes(label=round(freq, dig=2)),
vjust=1.6, color="white", size=3.5) +
theme_minimal()
tmp = ratings %>%
group_by(UserID) %>%
summarize(ratings_per_user = n())
summary(tmp$ratings_per_user)
stem(tmp$ratings_per_user)
sum(tmp$ratings_per_user > 500)
sort(tmp$ratings_per_user[tmp$ratings_per_user>1300])
tmp %>%
ggplot(aes(ratings_per_user)) +
geom_bar(fill = "steelblue") + coord_cartesian(c(20, 500))
tmp = tmp %>% full_join(users, by = 'UserID')
tmp = ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(), ave_ratings = mean(Rating)) %>%
inner_join(movies, by = 'MovieID')
summary(tmp$ratings_per_movie)
tmp %>%
filter(ratings_per_movie > 2000) %>%
arrange(desc = ratings_per_movie) %>%
select(c("Title", "ratings_per_movie")) %>%
print(n = 31)
tmp %>% ggplot(aes(ratings_per_movie)) +
geom_bar(fill = "steelblue", width = 1) + coord_cartesian(c(1,1500))
small_image_url = "https://liangfgithub.github.io/MovieImages/"
ratings %>%
group_by(MovieID) %>%
summarize(ratings_per_movie = n(),
ave_ratings = round(mean(Rating), dig=3)) %>%
inner_join(movies, by = 'MovieID') %>%
filter(ratings_per_movie > 1000) %>%
top_n(10, ave_ratings) %>%
mutate(Image = paste0('<img src="',
small_image_url,
MovieID,
'.jpg?raw=true"></img>')) %>%
select('Image', 'Title', 'ave_ratings') %>%
arrange(desc(-ave_ratings)) %>%
datatable(class = "nowrap hover row-border",
escape = FALSE,
options = list(dom = 't',
scrollX = TRUE, autoWidth = TRUE))
###############################################################
system1_1 = function(genres,movie = movies,rates = ratings){
movs_ids = list()
i = 1
for(g in movies$Genres){
if(grepl(genres, g, fixed = TRUE)){
movs_ids = movies %>% filter(movies$Genres == g)
}
}
sub_data = movies %>% filter(MovieID %in% movs_ids$MovieID)#movies$Genres == genres)
print('******')
print(head(sub_data))
print('******')
movie_ids = sub_data$MovieID
rating_id = rep(0,length(movie_ids))
for (i  in 1:length(movie_ids)) {
k = 0
for (j in 1:nrow(ratings)) {
if (ratings$MovieID[j] == movie_ids[i]){
rating_id[i] = rating_id[i] + ratings$Rating[j]
k = k + 1
}
}
rating_id[i] = rating_id[i]/k
}
res_id =movie_ids[order(rating_id,decreasing = TRUE)]
#if (length(res_id) > 5){
#res_id_brief = res_id[1:5]
#}
#else{
res_id_brief = res_id
#}
movie_recommend = rep(0,length(res_id_brief))
for (i in 1:length(res_id_brief)) {
movie_recommend[i] = movies %>%
filter(movies$MovieID == res_id_brief[i]) %>%
select(Title)
}
movie_recommend = unlist(movie_recommend)
return(movie_recommend)
}
#system1_1(genres = "Musical")
######################################################
system1_2 = function(genres,movie = movies,rates = ratings){
movs_ids = list()
i = 1
for(g in movies$Genres){
if(grepl(genres, g, fixed = TRUE)){
movs_ids = movies %>% filter(movies$Genres == g)
}
}
sub_data = movies %>% filter(MovieID %in% movs_ids$MovieID)#movies$Genres == genres)
print('******')
print(head(sub_data))
print('******')
#sub_data = movies %>% filter(genres %in% movies$Genres)# == genres)
movie_ids = sub_data$MovieID
rating_id = rep(0,length(movie_ids))
popularity = rep(0,length(movie_ids))
for (i  in 1:length(movie_ids)) {
k = 0
for (j in 1:nrow(ratings)) {
if (ratings$MovieID[j] == movie_ids[i]){
rating_id[i] = rating_id[i] + ratings$Rating[j]
k = k + 1
popularity[i] = popularity[i] +1
}
}
rating_id[i] = rating_id[i]/k
}
res_id =movie_ids[order(popularity,rating_id,decreasing = TRUE)]
if (length(res_id) > 5){
res_id_brief = res_id[1:5]
}
else{
res_id_brief = res_id
}
movie_recommend = rep(0,length(res_id_brief))
for (i in 1:length(res_id_brief)) {
movie_recommend[i] = movies %>%
filter(movies$MovieID == res_id_brief[i]) %>%
select(MovieID)
}
movie_recommend = unlist(movie_recommend)
return(movie_recommend)
}
all_genres = c('Animation','Adventure','Comedy','Action','Drama','Thriller','Crime',
'Children\'s','Documentary','Sci-Fi','Horror','Western','Mystery','Film-Noir','War','Fantasy','Musical')
for(genre in all_genres){
print(genre)
#rec_results = system1_1(genres = genre)
rec_results = system1_2(genres = genre)
setwd("/Users/negin/Documents/Illinois/Courses/CS598_Practical_Statistical_Learning/Projects/Project4/Project4_MovieRecommendation_App/movie_data/system1_data")
#write.csv(rec_results,paste('system1_1_',genre,'.csv', sep=''))
write.csv(rec_results,paste('system1_2_',genre,'.csv', sep=''))
#print(paste('system1_1_',genre,' csv file has been created', sep=''))
print(paste('system1_2_',genre,' csv file has been created', sep=''))
}
print('Done')
#system1_2(genres = "Musical")
runApp('~/Documents/Illinois/Courses/CS598_Practical_Statistical_Learning/Projects/Project4/Project4_MovieRecommendation_App')
runApp('~/Documents/Illinois/Courses/CS598_Practical_Statistical_Learning/Projects/Project4/Project4_MovieRecommendation_App')
runApp('~/Documents/Illinois/Courses/CS598_Practical_Statistical_Learning/Projects/Project4/Project4_MovieRecommendation_App')
runApp('~/Documents/Illinois/Courses/CS598_Practical_Statistical_Learning/Projects/Project4/Project4_MovieRecommendation_App')
runApp('~/Documents/Illinois/Courses/CS598_Practical_Statistical_Learning/Projects/Project4/Project4_MovieRecommendation_App')
runApp('~/Documents/Illinois/Courses/CS598_Practical_Statistical_Learning/Projects/Project4/Project4_MovieRecommendation_App')
runApp('~/Documents/Illinois/Courses/CS598_Practical_Statistical_Learning/Projects/Project4/Project4_MovieRecommendation_App')
